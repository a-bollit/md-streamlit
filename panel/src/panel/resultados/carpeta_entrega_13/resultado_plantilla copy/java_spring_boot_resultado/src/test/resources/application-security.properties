## Configuracion del servidor ##
spring.application.name=1234_rest_prueba
spring.application.version=1.0.0
spring.tomcat.version=@tomcat.version@
java.version=@java.version@
japi.version=@revision@
# Si no se encuentra un metodo que pueda atender la peticion REST, lanza una excepcion
spring.mvc.throw-exception-if-no-handler-found=true
# Desactiva la pagina de error de Spring en navegadores
server.error.whitelabel.enabled=false

# Contexto de la aplicacion
server.servlet.context-path=/${spring.application.name}
# Configuracion para no devolver nulos en los JSON de respuesta, si hay un nulo, no devuelve la propiedad
spring.jackson.default-property-inclusion=NON_NULL
spring.jackson.serialization.fail-on-empty-beans=false


# Perfil de Spring por defecto si no se especifica ninguno
spring.profiles.active=desarrollo

# Numero de resultados por defecto para las consultas paginadas (sin usar $limit)
japi.rest.paginated-request-default-limit=25

# Capacidad maxima para subidas de ficheros mediante peticiones multipart #
# Para un fichero individual en una peticion multipart
spring.servlet.multipart.max-file-size=5MB
# Para una peticion multipart completa (una peticion multipart puede incluir mas de un fichero)
spring.servlet.multipart.max-request-size=10MB

## Configuracion de la base de datos ##
# En caso de necesitarse, puede configurarse un esquema comun a todas las entidades
# y activarse el uso de sinonimos
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.synonyms=true
spring.jpa.properties.hibernate.default_schema=DBA_EXPE
spring.jpa.properties.hibernate.dialect=org.madrid.japi.jpa.dialects.OracleDialectWithRegexSupport
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:1234_rest_prueba_db;Mode=Oracle;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS DBA_EXPE\\;SET SCHEMA DBA_EXPE
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
japi.datasource.type=h2
spring.jpa.properties.hibernate.hbm2ddl.schema_filter_provider=org.madrid.japi.rest.internal.filters.JapiHibernateDDLCreationFilterProvider
spring.h2.console.enabled=true
spring.h2.console.web-allow-others=true
spring.h2.console.trace=true
spring.datasource.username=dba_expe
spring.datasource.password=sis
# Uso de secuencias de la base de datos Oracle para la generacion de IDs de Hibernate
spring.jpa.hibernate.use-new-id-generator-mappings=false
# Paquete a partir del que Hibernate escaneara las entidades. Importante que sea valido y correcto
japi.hibernate.entity-scan-base-package=org.madrid.1234.rest.prueba

# El siguiente bloque de propiedades solo se modificara con autorizacion de Arquitectura
spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.pool-name=springBootJPAHikariCP
spring.datasource.hikari.max-lifetime=2000000
spring.datasource.hikari.connection-timeout=30000

## Configuracion de la seguridad ##
japi.security.jwt.authorization.header-name=X-JWT-Assertion
japi.security.jwt.authorization.parameter-name=access_token
japi.security.jwt.authorization.expired-time-extension=3650d
## Excluye de la seguridad los recursos status ##
japi.security.exclude.url-pattern=/status,/v1/status,/actuator/**

## Configuracion de los errores ##
japi.rest.errors.stacktraces.active=false
# Numero de lineas por defecto a mostrar en las respuestas REST
japi.rest.errors.stacktraces.limit=10

## Configuracion del Swagger generado por el servicio rest ##
# El swagger se genera a partir del codigo y se expone en la direccion indicada
japi.rest.swagger.version=v1
japi.rest.swagger.description=Generated API
japi.rest.swagger.pagina-inicio=/swagger-ui.html#
springdoc.api-docs.enabled=true

## Configuracion general del log ##
logging.level.io.swagger.models.parameters.AbstractSerializableParameter=error
debug=false
## Propiedades del Tomcat embebido ##
# El siguiente bloque de propiedades solo se modificara con autorizacion de arquitectura
server.tomcat.connection-timeout=30001
server.tomcat.max-http-form-post-size=6MB
server.tomcat.max-swallow-size=6MB
server.max-http-header-size=9KB
server.tomcat.max-threads=201
server.tomcat.min-spare-threads=26
server.tomcat.remote-ip-header=X-Forwarded-For
server.tomcat.uri-encoding=UTF-8

## Tomcat access log ##
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.suffix=.log
server.tomcat.accesslog.prefix=tomcat_access_log
server.tomcat.accesslog.file-date-format=.yyyy-MM-dd
server.tomcat.accesslog.pattern=%h %l %u %{yyyy-MM-dd HH:mm:ss.SSS}t "%r" %s %b %v %T
server.tomcat.accesslog.directory=/usr/aplic_ICM/logs/${spring.application.name}
# En caso de ejecutarse en local desde un Windows, debera usarse la propiedad de abajo
#server.tomcat.accesslog.directory=c:/usr/aplic_ICM/logs/${spring.application.name}
server.tomcat.accesslog.max-days=7

## Configuracion de Jolokia ##
management.endpoints.enabled-by-default=false
management.endpoint.loggers.enabled=true
management.endpoint.configprops.enabled=true
management.endpoint.env.enabled=true
management.endpoint.mappings.enabled=true
management.endpoint.metrics.enabled=true
management.endpoint.info.enabled=true
management.endpoint.health.enabled=true
management.endpoint.jolokia.enabled=true

## Configuracion de core-storage-lib ##
core8.storage.directorio-compartido=/usr/aplic_ICM/compartido/dca_1234
core8.storage.chunk-size=2MB
## Direccion del fichero log4j.properties ##
#logging.config=./config/log4j2.properties
## Configuracion del servidor ##
server.port=9000

# Esta propiedad debera estar obligatoriamente a true en produccion
japi.security.active=true
# Url de la clave publica de WSO2 con la que se comprueba la firma del Token JWT. Depende del Tenant en el que esta publicado el API
# Si el API esta publicado en el Tenant de Ciudadanos o cualquier otro que no sea el SuperTenant, sera distinta
japi.security.jwt.authorization.jwks-server-uri=https://apiscmintra.val.comunidad.madrid/md/infraestructura/identidad/v1/jwks

# Configuracion del CORS
japi.security.cors[0].mapping=/**
japi.security.cors[0].allowed-origins=*
japi.security.cors[0].allowed-methods=GET,POST,OPTIONS,PUT,DELETE
japi.security.cors[0].allowed-headers=Access-Control-Allow-Headers,X-Requested-With,Content-Type,Accept,x-trace-id
japi.security.cors[0].exposed-headers=Content-Type,Content-Disposition
japi.security.cors[0].allow-credentials=false
japi.security.cors[0].max-age=300

## Configuracion de la exposicion de los endpoints de Actuator ##
# En esta propiedad se indican los endpoints de actuator que se exponen
# se puede usar * para exponerlos todos salvo en entornos productivos, donde no se permite. Ejemplos de endpoints de actuator: /info, /health, /beans ...
management.endpoints.web.exposure.include=*

## Configuracion de los paquetes que se quieren sacar en el log ##
japi.log.root=debug
japi.log.org.springframework=info
japi.log.springfox=info
japi.log.org.hibernate=info
japi.log.org.hibernate.SQL=info
# Con debug mostrara el estado del pool en el log cada 30s (en produccion poner INFO)
japi.log.com.zaxxer.hikari.pool.HikariPool.logPoolState=info
japi.log.org.apache=info
japi.log.org.madrid.japi=info
japi.log.com.ulisesbocchio.jasyptspringboot=error
# Log de las librerias de core
japi.log.org.madrid.core=info
japi.log.org.madrid.core8=info

# Log de la aplicacion
japi.log.org.madrid.1234.rest.prueba=debug

## Propiedades de la aplicacion

