#!/usr/bin/env python
import sys
import os

# Aseg칰rate de agregar la ruta al directorio 'src'
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))
import streamlit as st 
from prueba_streamlit.crew import PruebaStreamlitCrew

# This main file is intended to be a way for your to run your
# crew locally, so refrain from adding necessary logic into this file.
# Replace with inputs you want to test with, it will automatically
# interpolate any tasks and agents information

def run():
    """
    Run the crew.
    """
    descripcion="""   El componente FormsMenu act칰a como un men칰 de navegaci칩n visual que presenta una serie de opciones al usuario en forma de botones. Cada bot칩n dirige al usuario a una ruta diferente dentro de la aplicaci칩n, cada una asociada con un tipo espec칤fico de formulario (reactivo o de plantilla) o un dise침o de formulario (con wizard, sin men칰, etc.).

Elementos Clave:
 

Navegaci칩n mediante Botones:
Los botones son los elementos interactivos principales. Cada uno tiene un enlace (link) que define la ruta de navegaci칩n cuando se hace clic.
Los botones est치n estilizados para tener una apariencia elevada (appearance="raised") y pueden adaptarse a diferentes contextos (adapt=true).
Dise침o Responsivo:
Utiliza una estructura de cuadr칤cula similar a Bootstrap para asegurar que la interfaz se adapte a diferentes tama침os de pantalla. Esto se logra con clases como col-sm-12, col-md-12, y col-lg-12.
Componentizaci칩n:
El componente est치 encapsulado en una tarjeta, lo que le da un contorno visual claro y posiblemente sombra o borde, dependiendo de los estilos.
칈conos y Texto:
Cada bot칩n incluye un 칤cono  y un texto descriptivo (span.title). El texto est치 dise침ado para ser truncado si es demasiado largo, asegurando que se mantenga dentro de los l칤mites del bot칩n."""

    inputs = {
        "description":descripcion,
    }
    crew_instance = PruebaStreamlitCrew()
    crew_instance.crew().kickoff(inputs=inputs)


def train():
    """
    Train the crew for a given number of iterations.
    """
    inputs = {
        "topic": "AI LLMs"
    }
    try:
        PruebaStreamlitCrew().crew().train(n_iterations=int(sys.argv[1]), filename=sys.argv[2], inputs=inputs)

    except Exception as e:
        raise Exception(f"An error occurred while training the crew: {e}")

def replay():
    """
    Replay the crew execution from a specific task.
    """
    try:
        PruebaStreamlitCrew().crew().replay(task_id=sys.argv[1])

    except Exception as e:
        raise Exception(f"An error occurred while replaying the crew: {e}")

def test():
    """
    Test the crew execution and returns the results.
    """
    inputs = {
        "topic": "AI LLMs"
    }
    try:
        PruebaStreamlitCrew().crew().test(n_iterations=int(sys.argv[1]), openai_model_name=sys.argv[2], inputs=inputs)

    except Exception as e:
        raise Exception(f"An error occurred while replaying the crew: {e}")


# Configurar la interfaz de Streamlit
st.title('Interfaz de PruebaStreamlitCrew)游땕')


# Entrada para el tema del art칤culo
descripcion = st.text_input('Ingrese la descripci칩n para ejecutar el crew:')

 

  
    # Bot칩n para ejecutar  
if st.button("Ejecutar Crew"):  
        if descripcion:  
            try:  
                # Ejecutar el m칠todo run con la descripci칩n proporcionada  
                inputs = {"description": descripcion} 
                crew_instance = PruebaStreamlitCrew()
                crew_instance.crew().kickoff(inputs=inputs) 
                st.success("El crew se ha ejecutado con 칠xito.")  
                result = crew_instance.component_generator_task().output
                # Mostrar el resultado
                st.subheader('Art칤culo Generado:')
                st.write(result)
            except Exception as e:  
                st.error(f"Ocurri칩 un error al ejecutar el crew: {str(e)}")  
        else:  
            st.warning("Por favor, ingrese una descripci칩n.")  
  
